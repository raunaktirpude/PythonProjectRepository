{"name": "test_verify_update_user", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test.test_UserManagement.TestManagement object at 0x00000219CA72AC60>\n\n    def test_verify_update_user(self):\n        self.driver.find_element(By.ID, \"login_username\").send_keys(\"depenad165@luravel.com\")\n        self.driver.find_element(By.ID, \"login_password\").send_keys(\"Raunak@8390\")\n    \n        # Select remember me checkbox\n        self.driver.find_element(By.ID, \"login_checkbox-input\").click()\n    \n        # Submit login form\n        self.driver.find_element(By.ID, \"login_submit\").click()\n    \n        # Wait for the element to be clickable\n        menu_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//ion-menu-button[@id='head_ham_btn']\")))\n        self.driver.execute_script(\"arguments[0].click();\", menu_button)\n    \n        # Click on management\n        management_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//ion-label[normalize-space()='Management']\"))\n        )\n        self.driver.execute_script(\"arguments[0].click();\", management_button)\n    \n        # Click on user option\n        user_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//ion-label[normalize-space()='User']\"))\n        )\n        self.driver.execute_script(\"arguments[0].scrollIntoView(true);\", user_button)\n        self.driver.execute_script(\"arguments[0].click();\", user_button)\n    \n        # Perform a right-click if the menu does not close\n        ActionChains(self.driver).move_by_offset(20, 10).context_click().perform()\n    \n        # Wait for the \"Edit\" button to be visible and clickable\n        edit_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//mat-icon[normalize-space()='edit']\"))\n        )\n        self.driver.execute_script(\"arguments[0].click();\", edit_button)\n    \n        # Scroll to the \"Update\" button\n        update_button_element = self.driver.find_element(By.XPATH, \"//span[normalize-space()='Update']\")\n        self.driver.execute_script(\"arguments[0].scrollIntoView(true);\", update_button_element)\n    \n        # Wait for the \"Update\" button to be clickable\n        update_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable(update_button_element))\n        time.sleep(0.5)\n    \n        # Click the \"Update\" button\n        self.driver.execute_script(\"arguments[0].click();\", update_button)\n    \n        # Wait for the URL to change to the expected URL\n        expected_url = \"https://carbon.bizdata360.com/#/baseapp/user\"\n>       WebDriverWait(self.driver, 10).until(expected_conditions.url_to_be(expected_url))\n\ntest\\test_UserManagement.py:296: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"381e6444acd9d3f6891fd3a47b9e58e2\")>, method = <function url_to_be.<locals>._predicate at 0x00000219CA7F56C0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1722048069431, "stop": 1722048082474, "uuid": "ca318347-ffac-4e2f-ab73-52ce32228037", "historyId": "ee27755b942f04f01b62e3cb636ff0c6", "testCaseId": "ee27755b942f04f01b62e3cb636ff0c6", "fullName": "test.test_UserManagement.TestManagement#test_verify_update_user", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown', 'log_on_failure')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_UserManagement"}, {"name": "subSuite", "value": "TestManagement"}, {"name": "host", "value": "Raunak"}, {"name": "thread", "value": "10708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_UserManagement"}]}