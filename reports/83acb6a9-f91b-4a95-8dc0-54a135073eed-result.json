{"name": "test_verify_create_user_with_empty_field", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"mdc-button__label\">...</span> is not clickable at point (1020, 509). Other element would receive the click: <ion-menu _ngcontent-cwr-c85=\"\" contentid=\"main-content\" side=\"start\" type=\"overlay\" swipe-gesture=\"false\" role=\"navigation\" aria-label=\"menu\" class=\"md menu-type-overlay menu-enabled menu-side-start hydrated show-menu\" content-id=\"main-content\" tabindex=\"0\">...</ion-menu>\n  (Session info: chrome=127.0.6533.72)\nStacktrace:\n\tGetHandleVerifier [0x00007FF6D1E49632+30946]\n\t(No symbol) [0x00007FF6D1DFE3C9]\n\t(No symbol) [0x00007FF6D1CF6FDA]\n\t(No symbol) [0x00007FF6D1D4FEEE]\n\t(No symbol) [0x00007FF6D1D4D962]\n\t(No symbol) [0x00007FF6D1D4AE7B]\n\t(No symbol) [0x00007FF6D1D4A095]\n\t(No symbol) [0x00007FF6D1D3C271]\n\t(No symbol) [0x00007FF6D1D6CA6A]\n\t(No symbol) [0x00007FF6D1D3BBB6]\n\t(No symbol) [0x00007FF6D1D6CC80]\n\t(No symbol) [0x00007FF6D1D8B041]\n\t(No symbol) [0x00007FF6D1D6C813]\n\t(No symbol) [0x00007FF6D1D3A6E5]\n\t(No symbol) [0x00007FF6D1D3B021]\n\tGetHandleVerifier [0x00007FF6D1F7F83D+1301229]\n\tGetHandleVerifier [0x00007FF6D1F8BDB7+1351783]\n\tGetHandleVerifier [0x00007FF6D1F82A03+1313971]\n\tGetHandleVerifier [0x00007FF6D1E7DD06+245686]\n\t(No symbol) [0x00007FF6D1E0758F]\n\t(No symbol) [0x00007FF6D1E03804]\n\t(No symbol) [0x00007FF6D1E03992]\n\t(No symbol) [0x00007FF6D1DFA3EF]\n\tBaseThreadInitThunk [0x00007FF92FBC257D+29]\n\tRtlUserThreadStart [0x00007FF930BAAF28+40]", "trace": "self = <test.test_UserManagement.TestManagement object at 0x00000219CA72A6C0>\n\n    def test_verify_create_user_with_empty_field(self):\n        self.driver.find_element(By.ID, \"login_username\").send_keys(\"depenad165@luravel.com\")\n        self.driver.find_element(By.ID, \"login_password\").send_keys(\"Raunak@8390\")\n    \n        # Select remember me checkbox\n        self.driver.find_element(By.ID, \"login_checkbox-input\").click()\n    \n        # Submit login form\n        self.driver.find_element(By.ID, \"login_submit\").click()\n    \n        # Wait for the menu button to be clickable and click it\n        menu_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//ion-menu-button[@id='head_ham_btn']\"))\n        )\n        self.driver.execute_script(\"arguments[0].click();\", menu_button)\n    \n        # Click on management\n        management_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//ion-label[normalize-space()='Management']\"))\n        )\n        self.driver.execute_script(\"arguments[0].click();\", management_button)\n    \n        # Click on user option\n        user_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//ion-label[normalize-space()='User']\"))\n        )\n        self.driver.execute_script(\"arguments[0].scrollIntoView(true);\", user_button)\n        self.driver.execute_script(\"arguments[0].click();\", user_button)\n    \n        # Perform a right-click if the menu does not close\n        ActionChains(self.driver).move_by_offset(20, 10).context_click().perform()\n    \n        # Click on add button to open user add form\n        add_button = WebDriverWait(self.driver, 10).until(\n            expected_conditions.element_to_be_clickable((By.XPATH, \"//span[normalize-space()='Add']\"))\n        )\n        self.driver.execute_script(\"arguments[0].click();\", add_button)\n    \n        # Click on add button to create or add user\n        user_add_button = self.driver.find_element(By.XPATH, \"//span[normalize-space()='Add']\")\n>       user_add_button.click()\n\ntest\\test_UserManagement.py:129: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000219CA792300>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF6D1DFA3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FF92FBC257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF930BAAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <span class=\"mdc-button__label\">...</span> is not clickable at point (1020, 509). Other element would receive the click: <ion-menu _ngcontent-cwr-c85=\"\" contentid=\"main-content\" side=\"start\" type=\"overlay\" swipe-gesture=\"false\" role=\"navigation\" aria-label=\"menu\" class=\"md menu-type-overlay menu-enabled menu-side-start hydrated show-menu\" content-id=\"main-content\" tabindex=\"0\">...</ion-menu>\nE         (Session info: chrome=127.0.6533.72)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6D1E49632+30946]\nE       \t(No symbol) [0x00007FF6D1DFE3C9]\nE       \t(No symbol) [0x00007FF6D1CF6FDA]\nE       \t(No symbol) [0x00007FF6D1D4FEEE]\nE       \t(No symbol) [0x00007FF6D1D4D962]\nE       \t(No symbol) [0x00007FF6D1D4AE7B]\nE       \t(No symbol) [0x00007FF6D1D4A095]\nE       \t(No symbol) [0x00007FF6D1D3C271]\nE       \t(No symbol) [0x00007FF6D1D6CA6A]\nE       \t(No symbol) [0x00007FF6D1D3BBB6]\nE       \t(No symbol) [0x00007FF6D1D6CC80]\nE       \t(No symbol) [0x00007FF6D1D8B041]\nE       \t(No symbol) [0x00007FF6D1D6C813]\nE       \t(No symbol) [0x00007FF6D1D3A6E5]\nE       \t(No symbol) [0x00007FF6D1D3B021]\nE       \tGetHandleVerifier [0x00007FF6D1F7F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF6D1F8BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF6D1F82A03+1313971]\nE       \tGetHandleVerifier [0x00007FF6D1E7DD06+245686]\nE       \t(No symbol) [0x00007FF6D1E0758F]\nE       \t(No symbol) [0x00007FF6D1E03804]\nE       \t(No symbol) [0x00007FF6D1E03992]\nE       \t(No symbol) [0x00007FF6D1DFA3EF]\nE       \tBaseThreadInitThunk [0x00007FF92FBC257D+29]\nE       \tRtlUserThreadStart [0x00007FF930BAAF28+40]\n\n..\\..\\AppData\\Roaming\\Python\\Python312\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "start": 1722048018657, "stop": 1722048021249, "uuid": "e6cdcbdd-2f1f-4a54-ab34-4622396f2650", "historyId": "52c76130ad435dff5e95e0e4c34f4ef4", "testCaseId": "52c76130ad435dff5e95e0e4c34f4ef4", "fullName": "test.test_UserManagement.TestManagement#test_verify_create_user_with_empty_field", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup_and_teardown', 'log_on_failure')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_UserManagement"}, {"name": "subSuite", "value": "TestManagement"}, {"name": "host", "value": "Raunak"}, {"name": "thread", "value": "10708-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_UserManagement"}]}